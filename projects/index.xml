<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Gustav Olsson</title>
    <link>https://gustavolsson.github.io/projects/</link>
    <description>Recent content in Projects on Gustav Olsson</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 22 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://gustavolsson.github.io/projects/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>turn3d</title>
      <link>https://gustavolsson.github.io/projects/turn3d/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gustavolsson.github.io/projects/turn3d/</guid>
      <description>*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;top:0;bottom:0;width:100%;margin:auto;}span{height:1.5em;text-align:center;font:60px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black;}▶&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen  turn3d Use your phone to 3d scan the world around you!
This iOS app creates a 3d model of what the back-facing camera sees in real-time. When finished, you can export the 3d model to either a sharable USDZ file (which is natively supported in iOS) or a high-resolution OBJ file (that can be imported into many different 3d software packages).</description>
    </item>
    
    <item>
      <title>Rope Minikit</title>
      <link>https://gustavolsson.github.io/projects/rope-minikit/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gustavolsson.github.io/projects/rope-minikit/</guid>
      <description>*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;top:0;bottom:0;width:100%;margin:auto;}span{height:1.5em;text-align:center;font:60px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black;}▶&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen  Rope Minikit The Rope Minikit is a code pacakge that brings stable rope physics to your Unity3d project. The rope component can be used to simulate simple hanging wires or more advanced setups with pulleys and weights that require active collision detection. The bundled example scene shows how to connect the rope for a physically simulated crane, a rope bridge and set of swings.</description>
    </item>
    
    <item>
      <title>Sharp Shadows Toolkit</title>
      <link>https://gustavolsson.github.io/projects/sharp-shadows-toolkit/</link>
      <pubDate>Wed, 04 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gustavolsson.github.io/projects/sharp-shadows-toolkit/</guid>
      <description>*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;top:0;bottom:0;width:100%;margin:auto;}span{height:1.5em;text-align:center;font:60px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black;}▶&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen  Sharp Shadows Toolkit The Sharp Shadows Toolkit is a code package that brings sharp, pixel-perfect shadows to your Lightweight/Universal Render Pipeline project. Many games and experiences target a non-photo-realistic art style for which sharp shadows are better suited than the built-in shadows that tend to be either too soft or too jagged, especially on low quality settings.</description>
    </item>
    
    <item>
      <title>Seaside Racing (Remaster)</title>
      <link>https://gustavolsson.github.io/projects/seaside-racing/</link>
      <pubDate>Fri, 22 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://gustavolsson.github.io/projects/seaside-racing/</guid>
      <description>*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;top:0;bottom:0;width:100%;margin:auto;}span{height:1.5em;text-align:center;font:60px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black;}▶&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen  Seaside Racing (Remaster) Experience the thrill (or madness) of driving a soapbox car down a mountain, accidentally knocking your competitors into the sea or getting lost in green fields without as much as a road sign to help you find your way.
 Physics-based multiplayer kart racing! Up to 12 players over the Internet or LAN 1-4 local players split screen (online or offline) Share-a-gamepad option (up to 4 players using 2 game pads) 3 playable maps  About the original This is a remastered version of the original Seaside Racing that was released on Xbox Live Indie Games in 2010.</description>
    </item>
    
    <item>
      <title>PICO-8 Display Driver</title>
      <link>https://gustavolsson.github.io/projects/pico8-display-driver/</link>
      <pubDate>Thu, 30 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://gustavolsson.github.io/projects/pico8-display-driver/</guid>
      <description>PICO-8 Display Driver I got an idea the other day to write a display driver in PICO-8 using the GPIO pins and here it is. The cart replaces the flip() function with a custom one that writes the PICO-8 frame buffer to a connected display (with a ssd1351 controller) over SPI using the GPIO pins on a Raspberry Pi. Turns out that it actually works :)
I use this display/controller board from Adafruit</description>
    </item>
    
    <item>
      <title>Master&#39;s Thesis</title>
      <link>https://gustavolsson.github.io/projects/masters-thesis/</link>
      <pubDate>Tue, 01 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gustavolsson.github.io/projects/masters-thesis/</guid>
      <description>*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;top:0;bottom:0;width:100%;margin:auto;}span{height:1.5em;text-align:center;font:60px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black;}▶&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen  Master&amp;rsquo;s Thesis @ DICE Stockholm As my master&amp;rsquo;s thesis in Complex Adaptive Systems at Chalmers University of Technology, I developed a new system for real-time water animation and rendering that enables realistic interactions between water and terrain in virtual scenes. I implemented the system in Frostbite, DICE&amp;rsquo;s in-house game engine. The thesis was carried out as a master&amp;rsquo;s thesis worker/intern on the Battlefield 1 team.</description>
    </item>
    
    <item>
      <title>Ocean Toolkit</title>
      <link>https://gustavolsson.github.io/projects/ocean-toolkit/</link>
      <pubDate>Tue, 16 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>https://gustavolsson.github.io/projects/ocean-toolkit/</guid>
      <description>*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;top:0;bottom:0;width:100%;margin:auto;}span{height:1.5em;text-align:center;font:60px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black;}▶&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen  Ocean Toolkit The Ocean Toolkit is a code package that brings realistic infinite ocean rendering to your Unity3d project. The water surface is offset according to a custom wave function which can be used to control large scale waves. Small scale waves are realized using scrolling normal maps. The toolkit is easy-to-use and does not require any coding.</description>
    </item>
    
    <item>
      <title>Mail Monster (LD#33)</title>
      <link>https://gustavolsson.github.io/projects/mail-monster/</link>
      <pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>https://gustavolsson.github.io/projects/mail-monster/</guid>
      <description>Mail Monster (Ludum Dare #33) You are the mail monster, pick up the mail without ruining the whole town! (You get a time penalty if you happen to destroy anything)
ARROWS TO MOVE+C TO JUMP</description>
    </item>
    
    <item>
      <title>Dōbutsu Ball (NMS2014)</title>
      <link>https://gustavolsson.github.io/projects/dobutsu-ball/</link>
      <pubDate>Sat, 23 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://gustavolsson.github.io/projects/dobutsu-ball/</guid>
      <description> 
Dōbutsu Ball (No More Sweden 2014) Me and two friends, Ossian and Kjell, made a game called Dōbutsu Ball during the No More Sweden 2014 game jam. It&amp;rsquo;s a game about two animals trapped in an eternal dodgeball match.
Presentation See our presentation at the 1 minute 40 second mark below:
*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;top:0;bottom:0;width:100%;margin:auto;}span{height:1.5em;text-align:center;font:60px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black;}▶&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen  </description>
    </item>
    
    <item>
      <title>Quadcopter Autopilot</title>
      <link>https://gustavolsson.github.io/projects/autoquad/</link>
      <pubDate>Thu, 30 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://gustavolsson.github.io/projects/autoquad/</guid>
      <description>*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;top:0;bottom:0;width:100%;margin:auto;}span{height:1.5em;text-align:center;font:60px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black;}▶&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen  Quadcopter Autopilot This is an autopilot for a quadcopter drone I wrote from scratch back in 2012. I used the physics engine in Unity3d to validate my ideas and develop the control logic, then I used the same autopilot code in a physical set up.
At the time, I was very new to electronics and I chose an embedded platform that required the code to run on a host computer.</description>
    </item>
    
    <item>
      <title>Shadow Volumes Toolkit</title>
      <link>https://gustavolsson.github.io/projects/shadow-volumes-toolkit/</link>
      <pubDate>Mon, 01 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://gustavolsson.github.io/projects/shadow-volumes-toolkit/</guid>
      <description>Shadow Volumes Toolkit  This package is DEPRECATED See the Sharp Shadows Toolkit for modern alternative!
 The Shadow Volumes Toolkit adds dynamic, pixel-perfect shadows to your projects. Use the Quick Shadow Setup dialog to instantly add shadows to your game objects, specify light/shadow properties and see the results in real-time. The toolkit supports all three Unity light types and any mesh can act as a shadow caster.</description>
    </item>
    
    <item>
      <title>Shatter Toolkit</title>
      <link>https://gustavolsson.github.io/projects/shatter-toolkit/</link>
      <pubDate>Fri, 08 Jul 2011 00:00:00 +0000</pubDate>
      
      <guid>https://gustavolsson.github.io/projects/shatter-toolkit/</guid>
      <description>*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;top:0;bottom:0;width:100%;margin:auto;}span{height:1.5em;text-align:center;font:60px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black;}▶&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen  Shatter Toolkit The Shatter Toolkit enables you to easily shatter or split any game object dynamically in real-time, whether you want to smash walls or slice fruits. The toolkit creates the necessary geometry, fills the holes and instantiates the new game objects for you.
One line of code shatters or splits a game object and no scripting is required if you use the bundled helper scripts.</description>
    </item>
    
    <item>
      <title>Buoyancy Toolkit</title>
      <link>https://gustavolsson.github.io/projects/buoyancy-toolkit/</link>
      <pubDate>Sun, 09 Jan 2011 00:00:00 +0000</pubDate>
      
      <guid>https://gustavolsson.github.io/projects/buoyancy-toolkit/</guid>
      <description>*{padding:0;margin:0;overflow:hidden}html,body{height:100%}img,span{position:absolute;top:0;bottom:0;width:100%;margin:auto;}span{height:1.5em;text-align:center;font:60px/1.5 sans-serif;color:white;text-shadow:0 0 0.5em black;}▶&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen  Buoyancy Toolkit The Buoyancy Toolkit is a code package for the Unity3d game engine that brings realistic buoyancy simulation to your project. Rigidbodies will float when submerged in fluid volumes of different densities and wave functions such as water pools or oceans with large waves. The shape and volume of one or more connected colliders will be taken into account to let the geometry follow the waves realistically.</description>
    </item>
    
    <item>
      <title>Seaside Racing (Original)</title>
      <link>https://gustavolsson.github.io/projects/seaside-racing-xblig/</link>
      <pubDate>Sun, 25 Jul 2010 00:00:00 +0000</pubDate>
      
      <guid>https://gustavolsson.github.io/projects/seaside-racing-xblig/</guid>
      <description> 
Seaside Racing (Original) Compete with your friends in this multiplayer kart racer! Play 1-4 players splitscreen either locally, over system link or on Xbox Live for a total of 8 players. Use your own Xbox Avatar and race through 3 different seaside courses!
Features  Physics-based multiplayer kart racing! Up to 8 players on Xbox Live or over System link 1-4 players splitscreen (online or offline) 3 playable maps  </description>
    </item>
    
    <item>
      <title>Sailor (LD#11)</title>
      <link>https://gustavolsson.github.io/projects/sailor/</link>
      <pubDate>Sun, 20 Apr 2008 00:00:00 +0000</pubDate>
      
      <guid>https://gustavolsson.github.io/projects/sailor/</guid>
      <description>Sailor (Ludum Dare #11) The game let’s you build a boat and sail the sea. Try to stay afloat as long as possible, it’s not as easy as it sounds!</description>
    </item>
    
    <item>
      <title>Physics Engine</title>
      <link>https://gustavolsson.github.io/projects/physics-engine-old/</link>
      <pubDate>Mon, 01 Jan 2007 00:00:00 +0000</pubDate>
      
      <guid>https://gustavolsson.github.io/projects/physics-engine-old/</guid>
      <description>Physics Engine This is a 3d rigidbody physics engine I wrote in high-school. I later used it to create the original and the remastered version of Seaside Racing.
Collision Detection I implemented the Gilbert-Johnson-Keerthi distance algorithm to handle collision detection. As it turns out, the Expanding Polytype Algorithm is not needed to find good contact points when objects intersect (because of the shape of the Minkowski Sum/Difference on intersection) and I used a much simpler algorithm that simply shot a ray &amp;ldquo;out&amp;rdquo; along the line going through the two objects&amp;rsquo; centers.</description>
    </item>
    
    <item>
      <title>Early Projects (1999-2006)</title>
      <link>https://gustavolsson.github.io/projects/early-projects/</link>
      <pubDate>Fri, 01 Jan 1999 00:00:00 +0000</pubDate>
      
      <guid>https://gustavolsson.github.io/projects/early-projects/</guid>
      <description>Early Projects (1999 to 2007) This page is dedicated to my early travels into programming and computer graphics. The code for most of these experiments and small programs are long gone, but I&amp;rsquo;ve managed to find some remnants in the form of screenshots :)
Robo (2003) Robo was my first ever 3d game. I wrote it using Visual Basic 6 and DirectX8 when I was 13 years old, and I was very proud :)</description>
    </item>
    
  </channel>
</rss>